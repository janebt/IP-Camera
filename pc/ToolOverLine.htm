<style type="text/css">
    label.filterCheckCon{
        width:80px;
    }

    li.reportType{
        width: 80%;
    }

    ul.lineSysEntryDT{
        position:relative;
        z-index:2;
        *zoom:1;
    }
    li.line label.desEntry{
        width:77px;
    }
    li.lineSysEntryDT{
        width:277px;
    }
    li.lineSysEntryDT input.dateText{
        width:156px;
    }
    li.lineSysEntryDT input.time{
        margin:20px 0 0 77px;
    }
    ul.entryType{
        margin-top:40px;
        position:relative;
    }
    label.desEntryType{
        font-size:14px;
        color:#A0A0A0;
        line-height:32px;
    }
    ul.entryType li.entryType{
        width:50%;
    }
    ul.entryType li.search{
        width: 20%;
        text-align: right;
    }
    span.dateCon{
        position:relative;
    }
    span.dateCon i.dateIcon{
        position:absolute;
    }
    input.textClock{
        background:url(../web-static/images/clock.png) no-repeat 130px 5px;
        cursor:pointer;
        text-align:left;
    }
    input.textCalender{
        background:url(../web-static/images/calender.png) no-repeat 130px 5px;
        cursor:pointer;
        text-align:left;
        margin-left:0px;
    }
    div.tableBorderCon{
        height:428px;
        margin-top:0px !important;
    }

    div.detailNewCon{
        width:720px;
        margin-bottom: 30px;
        height:526px;
    }

    div.blockBorderTable{
        margin-top:20px !important;
    }

    #chartStyleButtons input.chartStyleButton{
        width: 96px;
        height: 32px;
        background-color: #2F2F2F;
        display: inline-block;
        color: white;
        margin: 0px;
        padding: 0px;
        border: 0px;
        cursor: pointer;
    }

    #chartStyleButtons input.chartStyleButtonLeft
    {
        border-radius: 20px 0px 0px 20px;
    }

    #chartStyleButtons input.chartStyleButtonRight
    {
        border-radius: 0px 20px 20px 0px;
    }

    #chartStyleButtons{
        text-align: center;
        margin-bottom: 20px;
    }

    #canvasArea
    {
        display: none;
        border: 0px;
        border-radius: 15px;
    }

    div.lineCon{
        background:url(../../web-static/images/line.png) repeat-x 0px 20px;
        clear:both;
        padding-top:52px;
        width:720px;
    }

    div.detailCon{
        width:720px;
        padding:0 0 20px;
    }

    div.tableCon div.tableFunc{
        text-align: right;
    }

    table.dataGrid{
        color:#A0A0A0;
        border-collapse:collapse;
        font-size:14px;
        width:720px;
        z-index:0;
    }
</style>

<script type="text/javascript">
    function init()
    {
        var oneDaySec = 24*3600;
        var curSysTimeSec = 0;
        var curOlFilterMode; //当前选择的统计类型,in || out
        var countOlFilterMode; //与最近一个统计生成的报表对应
        var curListFilterMode; //当前选择的报表类型,day || week || month || year
        var countListFilterMode; //与最近一个统计生成的报表对应
        var entry = [];//存放原始的统计数据, 供生成列表使用
        var entryListForGraph = [];//存放整理后的统计数据，供画图使用，Object型
        var entryListForTable = [];//存放整理后的统计数据，供表格使用，Object型
        var dayNum; //若是月报表，存放当前月天数
        var tmpDateSec; //为保存报表生成时间，注意不能直接赋值beginDate,否则始终和beginDate同步赋值
        var curChartStyle;//存放当前选中的图表类型，tableSelect || barChartSelect || lineChartSelect
        var bPageFirstLoaded = true;
        var beginDate = id("beginDate");
        var gEntryTblNiceScroll;
        var dataGridEntry = null;

        var SYS_FILE_NAME = uciSystem.fileName; //为了读取系统时间
        var CLOCK_STATUS = uciSystem.secName.clockStatus;
        var SECONDS = uciSystem.optName.seconds;
        var OL_FILE_NAME = uciOverLineEntry.fileName;
        var OL_SEC_NAME = uciOverLineEntry.secName.ol;
        var OPT_NAME = uciOverLineEntry.optName;
        var COUNT = OPT_NAME.Count;
        var READ_ENTRY = uciOverLineEntry.actionName.readEntry;

        id("outputEntry").onclick = function()
        {
            tabletoExcel("entryTbl");
        }

        id("tableButton").onclick = function()
        {
            curChartStyle = "tableSelect";
            cleanButtonBackground();
            $("#tableButton").css({"background-color":"#2797FF"});
            $("#tableButton").css({"color":"#FFFFFF"});
            $("#outputEntry").css({"display":"inline-block"});
            drawTable();
            $("#tableButton").attr("disabled", true);
            $("#barChartButton").attr("disabled", false);
            $("#lineChartButton").attr("disabled", false);
        }

        id("barChartButton").onclick = function()
        {
            curChartStyle = "barChartSelect";
            cleanButtonBackground();
            $("#barChartButton").css({"background-color":"#2797FF"});
            $("#barChartButton").css({"color":"#FFFFFF"});
            $("#outputEntry").css({"display":"none"});
            drawGraph("barChart");
            $("#tableButton").attr("disabled", false);
            $("#barChartButton").attr("disabled", true);
            $("#lineChartButton").attr("disabled", false);
        }

        id("lineChartButton").onclick = function()
        {
            curChartStyle = "lineChartSelect";
            cleanButtonBackground();
            $("#lineChartButton").css({"background-color":"#2797FF"});
            $("#lineChartButton").css({"color":"#FFFFFF"});
            $("#outputEntry").css({"display":"none"});
            drawGraph("lineChart");
            $("#tableButton").attr("disabled", false);
            $("#barChartButton").attr("disabled", false);
            $("#lineChartButton").attr("disabled", true);
        }

        id("searchEntry").onclick = function()
        {
            getTableEntryData(getStartSeconds(beginDate), curOlFilterMode, curListFilterMode, function(){
                switch(curChartStyle)
                {
                    case "tableSelect":
                        $("#tableButton").attr("disabled", false);
                        $('#tableButton').trigger("click");
                        break;
                    case "barChartSelect":
                        $("#barChartSelect").attr("disabled", false);
                        $('#barChartButton').trigger("click");
                        break;
                    case "lineChartSelect":
                        $("#lineChartSelect").attr("disabled", false);
                        $('#lineChartButton').trigger("click");
                        break;
                    default:
                        $("#tableButton").attr("disabled", false);
                        $('#tableButton').trigger("click");
                        break;
                }
            });
        }

        /* 清空按钮颜色 */
        function cleanButtonBackground()
        {
            $("#tableButton").css({"background-color":"#2F2F2F"});
            $("#tableButton").css({"color":"#959595"});
            $("#barChartButton").css({"background-color":"#2F2F2F"});
            $("#barChartButton").css({"color":"#959595"});
            $("#lineChartButton").css({"background-color":"#2F2F2F"});
            $("#lineChartButton").css({"color":"#959595"});
        }

        function errorHandle(code, objOrId)
        {
            switch(parseInt(code))
            {
                case ENONE:
                    return true;
                case IPCODENTRYPARAERR:
                    showStr = errStr.olEntryParErr;
                    break;
                case IPCUBUSCONNFAIL:
                    showStr = errStr.ipcUbusConnFail;
                    break;
                case IPCUBUSCALLERR:
                    showStr = errStr.ipcUbusCallErr;
                    break;
                case IPCUMGUESTNAUTH:
                    showStr = errStr.invPermissionDenied;
                    break;
                default:
                    showStr = errStr.invRequestFail;
                    break;
            }

            closeToast();
            showAlert(showStr, objOrId);
            return false;
        }

        function getTableEntryData(startTime, overLineType, listType, callback)
        {
            var data = {};
            var module = {};
            var actObj = {};
            entry = [];

            data[OL_FILE_NAME] = module;
            module[READ_ENTRY] = actObj;
            actObj[OPT_NAME.startTime] = startTime;
            actObj[OPT_NAME.olType] = overLineType || curOlFilterMode
            actObj[OPT_NAME.listType] = listType || curListFilterMode;

            showToast();
            $.action(data, function(result){
                if(true == errorHandle(result[ERR_CODE]))
                {
                    closeToast();

                    if("month" == listType)
                    {
                        var now = new Date(startTime * 1000);
                        var monthDT = now.getMonth() + 1;
                        var yearDT = now.getFullYear();

                        dayNum = getDaysInOneMonth(yearDT, monthDT);
                    }

                    countOlFilterMode = curOlFilterMode;
                    countListFilterMode = curListFilterMode;
                    tmpDateSec = startTime;

                    entry = result[OL_SEC_NAME][COUNT];

                    callback();
                }

                if (true == bPageFirstLoaded)
                {
                    bPageFirstLoaded = false;
                    showDetailCon();
                }
            });
        }

        /* 生成列表使用的数据 */
        function genTableList()
        {
            entryListForTable = [];
            var item = {};

            switch(countListFilterMode)
            {
                case "day":
                    var day = {};
                    for (var i = 0; i < 24; i++)
                    {
                        if(10 > i)
                        {
                            day[i] = "0"+i+":00:00"+"-"+"0"+i+":59:59";
                        }
                        else
                        {
                            day[i] = ""+ i+":00:00"+"-"+i+":59:59";
                        }

                        item = {};
                        item["date"] = day[i];
                        item["event"]= entry[i];
                        entryListForTable[i] = item;
                    }
                    break;
                case "week":
                    var week = [label.Mon, label.Tue, label.Wen, label.Thu, label.Fri, label.Sta, label.Sun];
                    for(var i = 0; i < 7; i++)
                    {
                        item = {};
                        item["date"] = week[i];
                        item["event"]= entry[i];;
                        entryListForTable[i] = item;
                    }
                    break;
                case "month":
                    for(var i = 0; i < dayNum; i++)
                    {
                        item = {};
                        item["date"] = i+1;
                        item["event"]= entry[i];
                        entryListForTable[i] = item;
                    }
                    break;
                case "year":
                    var year = [label.Jan, label.Feb, label.Mar, label.Apr, label.May, label.Jun, label.Jul,label.Aug, label.Sep, label.Oct, label.Nov, label.Dec];
                    for (var i = 0; i < 12; i++)
                    {
                        item = {};
                        item["date"] = year[i];
                        item["event"]= entry[i];
                        entryListForTable[i] = item;
                    }
                    break;
                default:
                    var day = {};
                    for (var i = 0; i < 24; i++)
                    {
                        if(10 > i)
                        {
                            day[i] = "0"+i+":00:00"+"-"+"0"+i+":59:59";
                        }
                        else
                        {
                            day[i] = ""+ i+":00:00"+"-"+i+":59:59";
                        }

                        item = {};
                        item["date"] = day[i];
                        item["event"]= entry[i];
                        entryListForTable[i] = item;
                    }
                    break;
            }
        }

        /* 生成图表使用的数据 */
        function genGraphList()
        {
            entryListForGraph = [];
            var xyValue = {};

            switch(countListFilterMode)
            {
                case "day":
                    for (var i = 0; i < 24; i++)
                    {
                        xyValue = {};
                        xyValue["name"] = i + 1;
                        xyValue["value"] = entry[i];
                        entryListForGraph[i] = xyValue;
                    }
                    break;
                case "week":
                    var week = [label.Mon, label.Tue, label.Wen, label.Thu, label.Fri, label.Sta, label.Sun];
                    for (var i = 0; i < 7; i++)
                    {
                        xyValue = {};
                        xyValue["name"] = week[i];
                        xyValue["value"] = entry[i];
                        entryListForGraph[i] = xyValue;
                    }
                    break;
                case "month":
                    for (var i = 0; i < dayNum; i++)
                    {
                        xyValue = {};
                        xyValue["name"] = i + 1;
                        xyValue["value"] = entry[i];
                        entryListForGraph[i] = xyValue;
                    }
                    break;
                case "year":
                    var year = [label.Jan, label.Feb, label.Mar, label.Apr, label.May, label.Jun, label.Jul,label.Aug, label.Sep, label.Oct, label.Nov, label.Dec];
                    for (var i = 0; i < 12; i++)
                    {
                        xyValue = {};
                        xyValue["name"] = year[i];
                        xyValue["value"] = entry[i];
                        entryListForGraph[i] = xyValue;
                    }
                    break;
                default:
                    for (var i = 0; i < 24; i++)
                    {
                        xyValue = {};
                        xyValue["name"] = i + 1;
                        xyValue["value"] = entry[i];
                        entryListForGraph[i] = xyValue;
                    }
                    break;
            }
        }

        /* 刷新列表 */
        function drawTable()
        {
            document.getElementById("tableBorderCon").style.display = "block";
            document.getElementById("canvasArea").style.display = "none";

            genTableList();
            id("entryTbl").rows[0].cells[1].innerHTML = "<span class=\"tableHeadConSp\">" + (countOlFilterMode == "in" ? label.comeInNum : label.comeOutNum) + "</span>";
            dataGridEntry.setDataSource(entryListForTable);
            dataGridEntry.refresh();
        }

        /* 初始化列表 */
        function initTable()
        {
            dataGridEntry = new DataGrid();
            genTableList();

            dataGridEntry.init({
                id:"entryTbl",  // table ID
                data:entryListForTable, // 数据源
                edit:false,
                hasSelBox:false,
                paging:{num:31, page:1},    // 分页选项
                niceScroll:gEntryTblNiceScroll,
                head:[{field:label.time, width:140, className:"TAC"},
                      {field:label.comeInNum, width:220, className:"TAC"}],
                list:[{name:"date", className:"TAC"},
                      {name:"event", className:"TAC"}]
            });
        }

        /* 生成图表 */
        function drawGraph(chartStyle)
        {
            document.getElementById("tableBorderCon").style.display = "none";

            var chartInfo = {};
            var barWidth = 0.8;
            var leftDis = 0.5;
            var smallPaddingWithY = 0;
            var smallPaddingBetween = 0;
            var xValuePosition = "center";

            genGraphList();

            switch(countListFilterMode)
            {
                case "day":
                    leftDis = 0;
                    barWidth = 1;
                    smallPaddingBetween = 1;
                    xValuePosition = "right";
                    break;
                case "week":
                    leftDis = 0.417;
                    barWidth = 0.52;
                    break;
                case "month":
                    leftDis = 0;
                    barWidth = 1;
                    smallPaddingBetween = 1;
                    break;
                case "year":
                    leftDis = 0;
                    barWidth = 1;
                    smallPaddingBetween = 2;
                    break;
                default:
                    leftDis = 0;
                    barWidth = 1;
                    smallPaddingBetween = 1;
                    xValuePosition = "right";
                    break;
            }

            chartInfo = {"graphName":getGraphName(),
                         "xyData":entryListForGraph,
                         "barWidth":barWidth,
                         "leftDis":leftDis,
                         "xValuePosition":xValuePosition,
                         "canvasId":"canvasArea",
                         "chartBackColor":"#121212",
                         "smallPaddingWithY":smallPaddingWithY,
                         "smallPaddingBetween":smallPaddingBetween};

            createChart(chartStyle, chartInfo);
        }

        /* 导出Excel表格 */
        function tabletoExcel(mytable)
        {
            if (1 == getExplorer())
            {
                toExcelByIE(mytable, '');
            }
            else
            {
                toExcelByURI();
            }
        }

        /* 判断浏览器类型 */
        function getExplorer()
        {
            var explorer = window.navigator.userAgent;

            if (0 <= explorer.indexOf("MSIE"))
            {
                return 1;
            }
            else if (0 <= explorer.indexOf("Firefox"))
            {
                return 0;
            }
            else if (0 <= explorer.indexOf("Chrome"))
            {
                return 0;
            }
            else if (0 <= explorer.indexOf("Opera"))
            {
                return 0;
            }
            else if (0 <= explorer.indexOf("Safari"))
            {
                return 0;
            }
            else
            {
                return 1;
            }
        }

        /* execCommand方式导出excel，适用于IE浏览器 */
        function toExcelByIE(inTblId, inWindow)
        {
            try
            {
                var allStr = "";
                var curStr = "";

                if( null != inTblId && "" != inTblId && "null" != inTblId)
                {
                    curStr = getTblData(inTblId, inWindow);
                }
                if( null != curStr)
                {
                    allStr += curStr;
                }
                else
                {
                    showAlert(errStr.tableNotExist);
                    return;
                }

                var fileName = getExcelName();
                doFileExport(fileName, allStr);
            }
            catch (e)
            {
                showAlert(errStr.exportException + "!" + e.name + "->" + e.description + "!");
            }
        }

        /* IE浏览器获取表格数据 */
        function getTblData(inTbl, inWindow)
        {
            var caption_str = "";
            var rows = 0;
            var tblDocument = document;

            if(!!inWindow && "" != inWindow)
            {
                if(!document.all(inWindow))
                {
                    return null;
                }
                else
                {
                    tblDocument = eval(inWindow).document;
                }
            }

            var curTbl = tblDocument.getElementById(inTbl).cloneNode(true);

            if("mytable" == inTbl)
            {
                curTbl.getElementsByTagName("th")[0].innerHTML = "XXX" + label.XXXNum;
                caption_str = $("#cur_title_date").text() + "XXX" + label.XXXTable;
            }
            else if("detail_table" == inTbl)
            {
                curTbl.getElementsByTagName("th")[0].innerHTML = "XXXX";
                caption_str = curTbl.getElementsByTagName("caption")[0].innerHTML.split("<br")[0];
            }
            else if("entryTbl" == inTbl)
            {
                var name = getExcelName();
                caption_str = name.substring(0, name.length-4);
            }

            if(65000 < curTbl.rows.length)
            {
                showAlert(errStr.tableLineOverAbundance);
                return false;
            }

            if(1 >= curTbl.rows.length)
            {
                showAlert(errStr.tableHasNoData);
                return false;
            }

            var outStr = caption_str + " \n";

            if(null != curTbl)
            {
                for(var j = 0; j < curTbl.rows.length; j++)
                {
                    for(var i = 0; i < curTbl.rows[j].cells.length; i++)
                    {
                        if(0 == i && 0 < rows)
                        {
                            outStr += " \t";
                            rows -= 1;
                        }

                        var tc = curTbl.rows[j].cells[i];

                        if(0 < j  && tc.hasChildNodes()
                                && "input" == tc.firstChild.nodeName.toLowerCase())
                        {
                            if("checkbox" == tc.firstChild.type.toLowerCase())
                            {
                                if(true == tc.firstChild.checked)
                                {
                                    outStr += label.optionOn + "\t";
                                }
                                else
                                {
                                    outStr += label.optionOff + "\t";
                                }
                            }
                        }
                        else
                        {
                            outStr += " " + curTbl.rows[j].cells[i].innerText + "\t";
                        }

                        if (1 < curTbl.rows[j].cells[i].colSpan)
                        {
                            for (var k = 0; k < curTbl.rows[j].cells[i].colSpan - 1; k++)
                            {
                                outStr += " \t";
                            }
                        }

                        if (0 == i)
                        {
                            if (0 == rows && 1 < curTbl.rows[j].cells[i].rowSpan)
                            {
                                rows = curTbl.rows[j].cells[i].rowSpan - 1;
                            }
                        }
                    }

                    outStr += "\r\n";
                }
            }
            else
            {
                outStr = null;
                showAlert(inTbl + errStr.tableNoExist);
            }

            return outStr;
        }

        /* IE浏览器execCommand方式导出excel */
        function doFileExport(inName, inStr)
        {
            var xlsWin = null;

            if (!!document.all("glbHideFrm"))
            {
                xlsWin = glbHideFrm;
            }
            else
            {
                var width = 1;
                var height = 1;
                var openPara = "left=" + (window.screen.width / 2 + width / 2)
                        + ",top=" + (window.screen.height + height / 2)
                        + ",scrollbars=no,width=" + width + ",height=" + height;
                xlsWin = window.open("", "_blank", openPara);
            }

            xlsWin.document.write(inStr);
            xlsWin.document.close();
            xlsWin.document.execCommand('Saveas', true, inName);
            xlsWin.close();
        }

        /* URI方式导出excel，适用于非IE内核浏览器 */
        function toExcelByURI()
        {
            var table = document.getElementById(mytable);
            table = table.cloneNode(true);

            var name = getExcelName();
            var caption_orig = table.getElementsByTagName("caption");
            $(caption_orig).text(name);

            var uri = 'data:application/vnd.ms-excel;base64,'
                  , template = '<html xmlns:o="urn:schemas-microsoft-com:office:office" xmlns:x="urn:schemas-microsoft-com:office:excel" xmlns="http://www.w3.org/TR/REC-html40"><head><!--[if gte mso 9]><?xml version="1.0" encoding="UTF-8" standalone="yes"?><x:ExcelWorkbook><x:ExcelWorksheets><x:ExcelWorksheet><x:Name>{worksheet}</x:Name><x:WorksheetOptions><x:DisplayGridlines/></x:WorksheetOptions></x:ExcelWorksheet></x:ExcelWorksheets></x:ExcelWorkbook></xml><![endif]--></head><body><table style="vnd.ms-excel.numberformat:@">{table}</table></body></html>'
                  , base64 = function (s)
                    {
                        return window.btoa(unescape(encodeURIComponent(s)));
                    }
                  , format = function (s, c)
                    {
                        return s.replace(/{(\w+)}/g,
                        function (m, p)
                        {
                            return c[p];
                        });
                    };

            if (!table.nodeType)
            {
                table = document.getElementById(table);
            }

            var worksheetName = name.substring(0,name.length-4);
            var ctx = { worksheet: worksheetName || 'Worksheet', table: table.innerHTML };
            document.getElementById("dlink").href = uri + base64(format(template, ctx));
            document.getElementById("dlink").download = name;
            document.getElementById("dlink").click();
        }

        /* 生成excel文件名 */
        function getExcelName()
        {
            var fileName;
            var startDate = formateBeginDate(tmpDateSec * 1000, countListFilterMode).split(" ")[0];
            var endDate = formateEndDate(tmpDateSec * 1000, countListFilterMode).split(" ")[0];

            switch(countListFilterMode)
            {
                case "day":
                    fileName = label.dayReport + "_" + startDate + ".xls";
                    break;
                case "week":
                    fileName = label.weekReport + "_" + startDate + "-" + endDate + ".xls";
                    break;
                case "month":
                    fileName = label.monthReport + "_" + startDate + "-" + endDate + ".xls";
                    break;
                case "year":
                    fileName = label.yearReport + "_" + startDate + "-" + endDate + ".xls";
                    break;
                default:
                    fileName = startDate + ".xls";
                    break;
            }

            return fileName;
        }

        /* 生成图表名 */
        function getGraphName()
        {
            var fileName;
            var startDate = formateBeginDate(tmpDateSec * 1000, countListFilterMode).split(" ")[0];
            var startMonth = startDate.split("-")[0] + "-" + startDate.split("-")[1];
            var startYear = startDate.split("-")[0];
            var endDate = formateEndDate(tmpDateSec * 1000, countListFilterMode).split(" ")[0];

            switch(countListFilterMode)
            {
                case "day":
                    fileName = label.dayReport + " (" + startDate + ")";
                    break;
                case "week":
                    fileName = label.weekReport + " (" + startDate + "至" + endDate + ")";
                    break;
                case "month":
                    fileName = label.monthReport + " (" + startMonth + ")";
                    break;
                case "year":
                    fileName = label.yearReport + " (" + startYear + ")";
                    break;
                default:
                    fileName = startDate;
                    break;
            }

            switch(countOlFilterMode)
            {
                case "in":
                    fileName = label.comeInNum + "_" + fileName;
                    break;
                case "out":
                    fileName = label.comeOutNum + "_" + fileName;
                    break;
                default:
                    fileName = label.comeInNum + "_" + fileName;
                    break;
            }

            return fileName;
        }

        function getDaysInOneMonth(year, month)
        {
            month = parseInt(month, 10);
            var d = new Date(year, month, 0);
            return d.getDate();
        }

        function modifyTimeStr(value)
        {
            if (10 > value)
            {
                value = "0" + value;
            }

            return value;
        }

        function formateBeginDate(msecs, type)
        {
            var now;

            if (undefined == msecs)
            {
                now = new Date();
            }
            else
            {
                now = new Date(msecs);
            }

            switch(type)
            {
                case "day":
                    return now.getFullYear() + "-" + modifyTimeStr(now.getMonth() + 1) + "-" + modifyTimeStr(now.getDate()) + " " + "00" + ":" + "00" + ":" + "00";
                case "week":
                    var MondayTime = now.getTime() - (now.getDay() + 6) % 7 * oneDaySec * 1000;/* now.getDay()范围是0-6 */
                    now = new Date(MondayTime);
                    return now.getFullYear() + "-" + modifyTimeStr(now.getMonth() + 1) + "-" + modifyTimeStr(now.getDate()) +  " " + "00" + ":" + "00" + ":" + "00";
                case "month":
                    return now.getFullYear() + "-" + modifyTimeStr(now.getMonth() + 1) + "-" + "01" + " " + "00" + ":" + "00" + ":" + "00";
                case "year":
                    return now.getFullYear() + "-" + "01" + "-" + "01" + " " + "00" + ":" + "00" + ":" + "00";
                default:
                    return now.getFullYear() + "-" + modifyTimeStr(now.getMonth() + 1) + "-" + modifyTimeStr(now.getDate()) + " " + "00" + ":" + "00" + ":" + "00";
            }
        }

        function formateEndDate(msecs, type)
        {
            var now;

            if (undefined == msecs)
            {
                now = new Date();
            }
            else
            {
                now = new Date(msecs);
            }

            switch(type)
            {
                case "day":
                    return now.getFullYear() + "-" + modifyTimeStr(now.getMonth() + 1) + "-" + modifyTimeStr(now.getDate()) + " " + "00" + ":" + "00" + ":" + "00";
                case "week":
                    var SundayTime = now.getTime() + (7-now.getDay()) % 7 * oneDaySec * 1000;
                    now = new Date(SundayTime);
                    return now.getFullYear() + "-" + modifyTimeStr(now.getMonth() + 1) + "-" + modifyTimeStr(now.getDate()) +  " " + "00" + ":" + "00" + ":" + "00";
                case "month":
                    var monthDT = now.getMonth() + 1;
                    var yearDT = now.getFullYear();
                    var daysNum = getDaysInOneMonth(yearDT, monthDT);
                    return now.getFullYear() + "-" + modifyTimeStr(now.getMonth() + 1) + "-" + daysNum + " " + "00" + ":" + "00" + ":" + "00";
                case "year":
                    return now.getFullYear() + "-" + "12" + "-" + "31" + " " + "00" + ":" + "00" + ":" + "00";
                default:
                    return now.getFullYear() + "-" + modifyTimeStr(now.getMonth() + 1) + "-" + modifyTimeStr(now.getDate()) + " " + "00" + ":" + "00" + ":" + "00";
            }
        }

        function getSysTime(callBack)
        {
            var data = {};
            data[SYS_FILE_NAME] = {};
            data[SYS_FILE_NAME][NAME] = CLOCK_STATUS;

            $.query(data, function(result){
                if (true == errorHandle(result[ERR_CODE]))
                {
                    if (true == $.local)
                    {
                        curSysTimeSec = 1000;
                    }
                    else
                    {
                        curSysTimeSec = parseInt(result[SYS_FILE_NAME][CLOCK_STATUS][SECONDS]);
                    }

                    callBack(curSysTimeSec);
                }
            });
        }

        function getStartSeconds(date)
        {
            var dateObj = new Date();
            var dataList = date.value.split("-");

            dateObj.setFullYear(dataList[0], parseInt(dataList[1], 10) - 1, dataList[2]);
            dateObj.setHours(parseInt(0, 10));
            dateObj.setMinutes(parseInt(0, 10));
            dateObj.setSeconds(parseInt(0, 10));

            return parseInt(dateObj.getTime() / 1000, 10);
        }

        function olFilterModeChange()
        {
            if (curOlFilterMode != getRadioChs("overlineFilterCheck"))
            {
                curOlFilterMode = getRadioChs("overlineFilterCheck");
            }
        }

        function listFilterModeChange()
        {
            if (curListFilterMode != getRadioChs("listFilterCheck"))
            {
                curListFilterMode = getRadioChs("listFilterCheck");
            }
        }

        function pageInit()
        {
            curOlFilterMode = "in";
            countOlFilterMode = "in";
            curListFilterMode = "day";
            countListFilterMode = "day";
            curChartStyle = "tableSelect";
            $("#tableButton").css({"background-color":"#2797FF"});
            $("#tableButton").css({"color":"#FFFFFF"});
            $("#tableButton").attr("disabled", true);

            laydate({elem:"#beginDate"});

            getSysTime(function(seconds){
                var todayDT = formateBeginDate(seconds * 1000, "day").split(" ");
                beginDate.value = todayDT[0];
                getTableEntryData(getStartSeconds(beginDate), curOlFilterMode, curListFilterMode, function(){
                        initTable();
                    });
            });

            initRadioInput("overlineFilterCheck", olFilterModeChange);
            initRadioInput("listFilterCheck", listFilterModeChange);

            gEntryTblNiceScroll = new NiceScroll("tableBorderCon");
            gEntryTblNiceScroll.scrollTipOpacity(1);
            gEntryTblNiceScroll.scrollTipSet({"background":"#34A9DA"});
            gEntryTblNiceScroll.init();
        }

        pageInit();
    }

    init();
</script>

<div class="detailCon menuLessMT">
    <ul class="line lineSysEntryDT">
        <li class="line lineSysEntryDT">
            <label class="des desA desEntry">{%label.beginTime%}</label>
            <input id="beginDate" type="text" class="text dateText textCalender" readonly="true" />
        </li>
    </ul>
    <ul class="line entryType">
        <li class="line entryType">
            <label class="des desA desEntry">{%label.overlineType%}</label>
            <i name="overlineFilterCheck" id="comeIn" value="in" checked="true"></i>
            <label for="forbid" class="des desH filterCheckCon">{%label.comeInNum%}</label>
            <i name="overlineFilterCheck" id="comeOut" value="out" checked="false"></i>
            <label for="forbid" class="des desH">{%label.comeOutNum%}</label>
        </li>
    </ul>
    <ul class="line entryType">
        <li class="line reportType">
            <label class="des desA desEntry">{%label.listType%}</label>
            <i name="listFilterCheck" id="dayList" value="day" checked="true"></i>
            <label for="forbid" class="des desH filterCheckCon">{%label.dayReport%}</label>
            <i name="listFilterCheck" id="weekList" value="week" checked="false"></i>
            <label for="forbid" class="des desH filterCheckCon">{%label.weekReport%}</label>
            <i name="listFilterCheck" id="monthList" value="month" checked="false"></i>
            <label for="forbid" class="des desH filterCheckCon">{%label.monthReport%}</label>
            <i name="listFilterCheck" id="yearList" value="year" checked="false"></i>
            <label for="forbid" class="des desH">{%label.yearReport%}</label>
        </li>
        <li class="line search">
            <input id="searchEntry" type="button" value={%label.overlineCount%} class="subBtn btnA btnA2" />
        </li>
    </ul>

    <div class="detailNewCon">
        <div id="chartStyleButtons" class="lineCon">
            <input type="button" id="tableButton" class="chartStyleButton chartStyleButtonLeft" value={%label.list%}>
            <input type="button" id="barChartButton" class="chartStyleButton" value={%label.barChart%}>
            <input type="button" id="lineChartButton" class="chartStyleButton chartStyleButtonRight" value={%label.lineChart%}>
        </div>
        <canvas id="canvasArea" width="720" height="440"></canvas>
        <div class="tableBorderCon" id="tableBorderCon">
            <table id="entryTbl" class="dataGrid"></table>
        </div>
    </div>

    <div class="tableCon">
        <div class="tableFunc">
            <a id="dlink" style="display:none;"></a>
            <input id="outputEntry" type="button" value={%label.overlineExport%} class="subBtn btnA"/>
        </div>
    </div>
</div>
<iframe id="glbHideFrm" style="width:400px;height:200px;display:none"></iframe>